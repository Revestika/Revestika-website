<?php
/**
 * Script de configuraci√≥n inicial para producci√≥n
 * Ejecutar UNA SOLA VEZ para configurar el sistema
 */

echo "üöÄ CONFIGURACI√ìN INICIAL REVESTIKA - OPENPAY\n";
echo "==========================================\n\n";

// Verificar que no se ejecute en producci√≥n por error
if ($_SERVER['SERVER_NAME'] !== 'localhost' && !isset($_GET['force'])) {
    die("‚ö†Ô∏è  ESTE SCRIPT SOLO DEBE EJECUTARSE EN DESARROLLO O CON ?force=1\n");
}

// 1. Verificar archivo .env
if (!file_exists('.env')) {
    if (file_exists('.env.example')) {
        copy('.env.example', '.env');
        echo "‚úÖ Archivo .env creado desde .env.example\n";
        echo "‚ùó EDITA .env con tus credenciales reales antes de continuar\n\n";
    } else {
        echo "‚ùå No se encontr√≥ .env.example\n";
        exit(1);
    }
} else {
    echo "‚úÖ Archivo .env ya existe\n";
}

// 2. Crear directorios necesarios
$directories = ['logs', 'orders', 'cache'];
foreach ($directories as $dir) {
    if (!file_exists($dir)) {
        if (mkdir($dir, 0755, true)) {
            echo "‚úÖ Directorio '$dir' creado\n";
        } else {
            echo "‚ùå Error creando directorio '$dir'\n";
        }
    } else {
        echo "‚úÖ Directorio '$dir' ya existe\n";
    }
}

// 3. Verificar permisos
foreach ($directories as $dir) {
    if (is_writable($dir)) {
        echo "‚úÖ Directorio '$dir' es escribible\n";
    } else {
        echo "‚ùå Directorio '$dir' NO es escribible\n";
    }
}

// 4. Crear archivo de √≠ndice para proteger directorios
$indexContent = "<?php\n// Acceso denegado\nheader('HTTP/1.0 403 Forbidden');\nexit('Acceso denegado');\n?>";

foreach ($directories as $dir) {
    $indexFile = "$dir/index.php";
    if (!file_exists($indexFile)) {
        file_put_contents($indexFile, $indexContent);
        echo "‚úÖ Protecci√≥n agregada a '$dir/'\n";
    }
}

// 5. Crear archivo .htaccess si no existe
$htaccessContent = "# Revestika - Configuraci√≥n de seguridad
RewriteEngine On

# Forzar HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Proteger archivos sensibles
<Files \".env\">
    Order allow,deny
    Deny from all
</Files>

<Files \"*.log\">
    Order allow,deny
    Deny from all
</Files>

# Headers de seguridad
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection \"1; mode=block\"
Header always set Referrer-Policy \"strict-origin-when-cross-origin\"
Header always set Permissions-Policy \"geolocation=(), microphone=(), camera=()\"

# Cache para recursos est√°ticos
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css \"access plus 1 month\"
    ExpiresByType application/javascript \"access plus 1 month\"
    ExpiresByType image/png \"access plus 1 month\"
    ExpiresByType image/jpg \"access plus 1 month\"
    ExpiresByType image/jpeg \"access plus 1 month\"
    ExpiresByType image/gif \"access plus 1 month\"
</IfModule>
";

if (!file_exists('.htaccess')) {
    file_put_contents('.htaccess', $htaccessContent);
    echo "‚úÖ Archivo .htaccess creado con configuraci√≥n de seguridad\n";
} else {
    echo "‚úÖ Archivo .htaccess ya existe\n";
}

// 6. Test b√°sico de configuraci√≥n
echo "\nüìã VERIFICANDO CONFIGURACI√ìN...\n";

try {
    // Cargar config si existe
    if (file_exists('config-openpay-secure.php')) {
        include 'config-openpay-secure.php';
        echo "‚úÖ Configuraci√≥n cargada correctamente\n";
        
        // Verificar variables cr√≠ticas
        if (!empty($OPENPAY_CONFIG['client_id'])) {
            echo "‚úÖ Client ID configurado\n";
        } else {
            echo "‚ùå Client ID faltante en .env\n";
        }
        
        if (!empty($OPENPAY_CONFIG['client_secret'])) {
            echo "‚úÖ Client Secret configurado\n";
        } else {
            echo "‚ùå Client Secret faltante en .env\n";
        }
        
    } else {
        echo "‚ùå config-openpay-secure.php no encontrado\n";
    }
} catch (Exception $e) {
    echo "‚ùå Error en configuraci√≥n: " . $e->getMessage() . "\n";
}

// 7. Verificar extensiones PHP
echo "\nüêò VERIFICANDO EXTENSIONES PHP...\n";
$requiredExtensions = ['curl', 'json', 'openssl', 'filter'];
foreach ($requiredExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "‚úÖ Extensi√≥n '$ext' disponible\n";
    } else {
        echo "‚ùå Extensi√≥n '$ext' NO disponible\n";
    }
}

// 8. Resumen final
echo "\n" . str_repeat("=", 50) . "\n";
echo "üìã RESUMEN DE CONFIGURACI√ìN\n";
echo str_repeat("=", 50) . "\n";

if (file_exists('.env')) {
    echo "‚úÖ Variables de entorno: Configuradas\n";
} else {
    echo "‚ùå Variables de entorno: Faltantes\n";
}

echo "‚úÖ Directorios: Creados\n";
echo "‚úÖ Seguridad: .htaccess configurado\n";
echo "‚úÖ Protecci√≥n: Archivos protegidos\n";

echo "\nüöÄ PR√ìXIMOS PASOS:\n";
echo "1. Editar .env con credenciales reales de OpenPay\n";
echo "2. Confirmar URLs en .env\n";
echo "3. Subir archivos al servidor\n";
echo "4. Ejecutar verificar-produccion.php\n";
echo "5. Realizar transacci√≥n de prueba\n";

echo "\n‚ö†Ô∏è  IMPORTANTE:\n";
echo "- NUNCA subas .env a Git\n";
echo "- Verifica que .gitignore est√© funcionando\n";
echo "- Mant√©n backups de .env en lugar seguro\n";
echo "- Cambia credenciales si son comprometidas\n\n";
?>